/*!
 * fileLogger
 * Copyright 2016 Peter Bakondy https://github.com/pbakondy
 * See LICENSE in this repository for license information
 */
!function(){angular.module("fileLogger",["ngCordova.plugins.file"]).factory("$fileLogger",["$q","$window","$cordovaFile","$timeout","$filter",function(e,o,r,a,n){"use strict";function t(){return o.parent&&o.parent.ripple}function l(){return!o.cordova&&!o.PhoneGap&&!o.phonegap||t()}function i(e){angular.isString(e)?(e=e.toUpperCase(),S.indexOf(e)===-1&&(e="INFO")):e="INFO";for(var o,r=new Date,a=m?n("date")(r,m,b):r.toJSON(),t=Array.prototype.slice.call(arguments,1),i=[a,e],s=0;s<t.length;s++)if(angular.isArray(t[s])){o="[Array]";try{o=JSON.stringify(t[s])}catch(f){}i.push(o)}else if(angular.isObject(t[s])){o="[Object]";try{o=JSON.stringify(t[s])}catch(f){}i.push(o)}else i.push(t[s]);if(l()){if(t.unshift(a),angular.isObject(console)&&angular.isFunction(console.log))switch(e){case"DEBUG":angular.isFunction(console.debug)?console.debug.apply(console,t):console.log.apply(console,t);break;case"INFO":angular.isFunction(console.debug)?console.info.apply(console,t):console.log.apply(console,t);break;case"WARN":angular.isFunction(console.debug)?console.warn.apply(console,t):console.log.apply(console,t);break;case"ERROR":angular.isFunction(console.debug)?console.error.apply(console,t):console.log.apply(console,t);break;default:console.log.apply(console,t)}}else console.log(i.join(" "));F.push({message:i.join(" ")+"\n"}),x||c()}function c(){if(!F.length)return void(x=!1);x=!0;var e=F.shift();s(e.message).then(function(){a(function(){c()})},function(){a(function(){c()})})}function s(a){var n=e.defer();if(l())o.localStorage[j]||(o.localStorage[j]=""),o.localStorage[j]+=a,n.resolve();else{if(!o.cordova||!o.cordova.file||!o.cordova.file.externalDataDirectory)return n.reject("cordova.file.externalDataDirectory is not available"),n.promise;r.checkFile(cordova.file.externalDataDirectory,j).then(function(){r.writeExistingFile(cordova.file.externalDataDirectory,j,a).then(function(){n.resolve()},function(e){n.reject(e)})},function(){r.writeFile(cordova.file.externalDataDirectory,j,a,!0).then(function(){n.resolve()},function(e){n.reject(e)})})}return n.promise}function f(){var a=e.defer();if(l())a.resolve(o.localStorage[j]);else{if(!o.cordova||!o.cordova.file||!o.cordova.file.externalDataDirectory)return a.reject("cordova.file.externalDataDirectory is not available"),a.promise;r.readAsText(cordova.file.externalDataDirectory,j).then(function(e){a.resolve(e)},function(e){a.reject(e)})}return a.promise}function u(){var a=e.defer();if(l())o.localStorage.removeItem(j),a.resolve();else{if(!o.cordova||!o.cordova.file||!o.cordova.file.externalDataDirectory)return a.reject("cordova.file.externalDataDirectory is not available"),a.promise;r.removeFile(cordova.file.externalDataDirectory,j).then(function(e){a.resolve(e)},function(e){a.reject(e)})}return a.promise}function g(e){return!!(angular.isString(e)&&e.length>0)&&(j=e,!0)}function p(e,o){if(!angular.isUndefined(e)&&!angular.isString(e))throw new TypeError("format parameter must be a string or undefined");if(!angular.isUndefined(o)&&!angular.isString(o))throw new TypeError("timezone parameter must be a string or undefined");m=e,b=o}function v(){var a=e.defer();if(l())a.resolve({name:j,localURL:"localStorage://localhost/"+j,type:"text/plain",size:o.localStorage[j]?o.localStorage[j].length:0});else{if(!o.cordova||!o.cordova.file||!o.cordova.file.externalDataDirectory)return a.reject("cordova.file.externalDataDirectory is not available"),a.promise;r.checkFile(cordova.file.externalDataDirectory,j).then(function(e){e.file(a.resolve,a.reject)},a.reject)}return a.promise}function d(){var e=Array.prototype.slice.call(arguments,0);e.unshift("DEBUG"),i.apply(void 0,e)}function y(){var e=Array.prototype.slice.call(arguments,0);e.unshift("INFO"),i.apply(void 0,e)}function h(){var e=Array.prototype.slice.call(arguments,0);e.unshift("WARN"),i.apply(void 0,e)}function D(){var e=Array.prototype.slice.call(arguments,0);e.unshift("ERROR"),i.apply(void 0,e)}var m,b,F=[],x=!1,S=["DEBUG","INFO","WARN","ERROR"],j="messages.log";return{log:i,getLogfile:f,deleteLogfile:u,setStorageFilename:g,setTimestampFormat:p,checkFile:v,debug:d,info:y,warn:h,error:D}}])}();